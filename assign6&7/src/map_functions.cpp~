#include <iostream> 	// Allows input output operations
#include <iomanip>
#include<math.h>

#include "map_functions.h"

using namespace std;

#define N           200
#define ARRAY_SIZE  (N*N)
#define M           100 


/*******************************************************************************
* Function Name  : array_map
* Description    : Maps plain_text_zero_padded to mapped_array using map array 
* Input          : plain_text_zero_padded
* Output         : mapped_array
* Return         : None
* Example        : plain_text_zero_padded "ABCDE00" -> mapped_array "abcd2ii" 
*******************************************************************************/


void array_map(char mapped_array[ARRAY_SIZE], char plain_text_zero_padded[ARRAY_SIZE])
{
	int i=0;
		while(plain_text_zero_padded[i]!='\0')
		{
			for(int j=0;j<M;j++)
			{
				if(plain_text_zero_padded[i]==map[j][0])
				{
					mapped_array[i]=map[j][1];
		//			cout<<"i m inside for loop i="<<i<<"j="<<j<<"mapped array="<<mapped_array[i]<<endl;
				}
			}
			i++;
		}
}



/*******************************************************************************
* Function Name  : inv_array_map
* Description    : Maps inv_mapped_array to decrypt_plain_text_zero_padded using map array 
* Input          : inv_mapped_array
* Output         : decrypt_plain_text_zero_padded
* Return         : None
* Example        : inv_mapped_array "abcd2ii" -> decrypt_plain_text_zero_padded "ABCDE00" 
*******************************************************************************/

void inv_array_map(char inv_mapped_array[ARRAY_SIZE], char decrypt_plain_text_zero_padded[ARRAY_SIZE])
{
	int i=0;
		while(inv_mapped_array[i]!='\0')
		{
			for(int j=0;j<M;j++)
			{
				if(map[j][1]==inv_mapped_array[i])
				{
					decrypt_plain_text_zero_padded[i]=map[j][0];
				}
			}
			i++;
		}
}

